package com.android.pgb.Activity.Activity_CK;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.pgb.Activity.Activity_Me.Activity_Auth;
import com.android.pgb.Activity.Activity_XJ.CreateXJ;
import com.android.pgb.Activity.Core.SelectCity;
import com.android.pgb.Activity.Core.SelectCompanyPeople;
import com.android.pgb.Activity.Core.SelectPGJG;
import com.android.pgb.Bean.Group;
import com.android.pgb.Bean.ProvinceBean;
import com.android.pgb.Bean.UserInfo;
import com.android.pgb.Bean.ZBBean;
import com.android.pgb.Utils.CheckUserInfo;
import com.android.pgb.Utils.Dialog;
import com.android.pgb.Utils.Image.Photo;
import com.android.pgb.BroadCast.ExChange;
import com.android.pgb.R;
import com.android.pgb.Utils.JSONUtils;
import com.android.pgb.Utils.Log;
import com.android.pgb.Utils.SharedPreferences.SharedPreferencesUtils;
import com.android.pgb.View.CBarView;
import com.android.pgb.View.InnerListview.adapt.ChildAdapt;
import com.bigkoo.pickerview.OptionsPickerView;
import com.bigkoo.pickerview.TimePickerView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BrokenBarrierException;

import me.iwf.photopicker.PhotoPicker;
import me.iwf.photopicker.PhotoPreview;

public class CreateKC extends Activity implements ExChange.CallBackForData, View.OnClickListener {

    private ExChange ex;
    private View zbdx_view;
    private TextView pgjg_et, zblx_et, szqs_et, kcb_et, zbfw_et, yxsj_et, yqwcrq_et, yqwcsj_et, zbdx_et;
    private EditText bdw_et, lxdh_et, xclxr_et, dkyh_et, bz_et, bc_et;
    private Photo p;
    private LinearLayout pgjg, zblx, szcs, xclxr, lxdh, dkyh, kcb, zbfw, yxsj, yqwcrq, yqwcsj, zbdx;
    private ArrayList<String> selectedPhotos;
    private OptionsPickerView optionsPickerView, cityPickerView;
    private TimePickerView time;
    private Button btn_submit;
    private int Dqdm;
    private JSONArray zbdx_int;
    private ArrayList<ProvinceBean> pickviewdata = new ArrayList<>();
    private int nbzb;
    private int kcbmb;
    private android.app.Dialog dialog;
    private UserInfo userInfo;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_kc);
        new CBarView(this, new CBarView.OnClickListener() {
            @Override
            public void onLeftClick() {
                super.onLeftClick();
                finish();
            }
        }, null);
        ex = new ExChange(this);
        ex.getSyType("zb");
        optionsPickerView = new OptionsPickerView(this);
        cityPickerView = new OptionsPickerView(this);
        time = new TimePickerView(this, TimePickerView.Type.YEAR_MONTH_DAY);
        initView();
    }

    private void initView() {
        pgjg = (LinearLayout) this.findViewById(R.id.pgjg);
        szcs = (LinearLayout) this.findViewById(R.id.szcs);
        zblx = (LinearLayout) this.findViewById(R.id.zblx);
        xclxr = (LinearLayout) this.findViewById(R.id.xclxr);
        lxdh = (LinearLayout) this.findViewById(R.id.lxdh);
        dkyh = (LinearLayout) this.findViewById(R.id.dkyh);
        kcb = (LinearLayout) this.findViewById(R.id.kcb);
        zbfw = (LinearLayout) this.findViewById(R.id.zbfw_Linner);
        yxsj = (LinearLayout) this.findViewById(R.id.yxsj);
        yqwcrq = (LinearLayout) this.findViewById(R.id.yqwcrq);
        yqwcsj = (LinearLayout) this.findViewById(R.id.yqwcsj);
        zbdx = (LinearLayout) this.findViewById(R.id.zbdx);

        pgjg_et = (TextView) this.findViewById(R.id.pgjg_et);
        zbdx_et = (TextView) this.findViewById(R.id.zbdx_et);
        zblx_et = (TextView) this.findViewById(R.id.zblx_et);
        szqs_et = (TextView) this.findViewById(R.id.szqs_et);
        kcb_et = (TextView) this.findViewById(R.id.kcb_et);
        zbfw_et = (TextView) this.findViewById(R.id.zbfw_et);
        yxsj_et = (TextView) this.findViewById(R.id.yxsj_et);
        yqwcrq_et = (TextView) this.findViewById(R.id.yqwcrq_et);
        yqwcsj_et = (TextView) this.findViewById(R.id.yqwcsj_et);
        Calendar now = Calendar.getInstance();
        yqwcsj_et.setText("23:59");
        yqwcrq_et.setText(now.get(Calendar.YEAR) + "-" + (now.get(Calendar.MONTH) + 1) + "-" + now.get(Calendar.DAY_OF_MONTH));
        bdw_et = (EditText) this.findViewById(R.id.bdw_et);
        lxdh_et = (EditText) this.findViewById(R.id.lxdh_et);
        xclxr_et = (EditText) this.findViewById(R.id.xclxr_et);
        dkyh_et = (EditText) this.findViewById(R.id.dkyh_et);
        bz_et = (EditText) this.findViewById(R.id.bz_et);
        bc_et = (EditText) this.findViewById(R.id.bc_et);
        zbdx_view = this.findViewById(R.id.zbdx_view);

        btn_submit = (Button) this.findViewById(R.id.btn_submit);

        zblx.setOnClickListener(this);
        pgjg.setOnClickListener(this);
        kcb.setOnClickListener(this);
        zbfw.setOnClickListener(this);
        yqwcrq.setOnClickListener(this);
        yxsj.setOnClickListener(this);
        yqwcsj.setOnClickListener(this);
        szcs.setOnClickListener(this);
        btn_submit.setOnClickListener(this);
        zbdx.setOnClickListener(this);

        p = (Photo) this.findViewById(R.id.photo);
        p.setActivity(CreateKC.this);

        //能获取到数据提前赋值
        userInfo = (UserInfo) SharedPreferencesUtils.readObject(this, "userinfo");

        SharedPreferences sp = SharedPreferencesUtils.getSharedPreferences(this);

        if (sp.getInt("dqdm", 0) > 0 && !sp.getString("dqmc", "").equals("")) {

            Dqdm = sp.getInt("dqdm", 0);
            szqs_et.setText(sp.getString("dqmc", ""));

        }
        pgjg_et.setText(userInfo.getGsmc());
    }

    private int zblb;

    @Override
    public void onClick(View v) {
        int vid = v.getId();
        pickviewdata.clear();
        try {
            switch (vid) {
                case R.id.pgjg:
                    startActivityForResult(new Intent(CreateKC.this, SelectPGJG.class), 200);
                    break;
                case R.id.zblx:
                    getWylxList();
                    setPickerView("choose_zblx");
                    optionsPickerView.show();
                    break;
                case R.id.kcb:
                    getKcb();
                    setPickerView("choose_kcb");
                    optionsPickerView.show();
                    break;
                case R.id.zbfw_Linner:
                    getZBFW();
                    setPickerView("choose_zbfw");
                    optionsPickerView.show();
                    break;
                case R.id.yxsj:
                    getYXSJ();
                    setPickerView("choose_yxsj");
                    optionsPickerView.show();
                    break;
                case R.id.yqwcrq:
                    setTimePick();
                    time.show();
                    break;
                case R.id.yqwcsj:
                    getYQWCSJ();
                    break;
                case R.id.zbdx:
                    Intent intent = new Intent(CreateKC.this, SelectCompanyPeople.class);
                    startActivityForResult(intent, 200);
                    break;
                case R.id.szcs:

                    startActivityForResult(new Intent(CreateKC.this, SelectCity.class), 2311);
                    break;

                case R.id.btn_submit:


                    CheckUserInfo.setUserInfo(userInfo);
                    if (!CheckUserInfo.checkSmrz()) {

                        new Dialog(CreateKC.this, "提示：", "实名认证后才可发布，是否前往认证？", new Dialog.dialogButton() {
                            @Override
                            public void ok(DialogInterface dialog, int which) {
                                Intent i = new Intent(CreateKC.this, Activity_Auth.class);
                                i.putExtra("type", "sm");
                                startActivity(i);
                            }

                            @Override
                            public void cannot(DialogInterface dialog, int which) {


                            }
                        });

                        return;
                    }
                    if (!CheckUserInfo.checkFdcgjs() && !CheckUserInfo.checkTdgjs()) {
                        new Dialog(CreateKC.this, "提示：", "估价师认证后才可发布，是否前往认证？", new Dialog.dialogButton() {
                            @Override
                            public void ok(DialogInterface dialog, int which) {
                                Intent i = new Intent(CreateKC.this, Activity_Auth.class);
                                i.putExtra("type", "fc");
                                startActivity(i);

                            }

                            @Override
                            public void cannot(DialogInterface dialog, int which) {
                            }
                        });
                        return;
                    }
                    try {

                        ZBBean z = new ZBBean();
                        z.setBc(Double.parseDouble(bc_et.getText().toString().trim()));
                        z.setBdw(bdw_et.getText().toString());
                        z.setZblb(zblb);
                        z.setSzcs(String.valueOf(Dqdm));
                        z.setLxdh(lxdh_et.getText().toString().trim());
                        z.setLxr(xclxr_et.getText().toString().trim());
                        z.setPgjg(pgjg_et.getText().toString().trim());
                        z.setZbyxsj(yxsj_et.getText().toString().trim());
                        z.setZbdx(zbdx_int);
                        z.setKcbmb(kcbmb);
                        z.setNbzb(String.valueOf(nbzb));
                        z.setZhlx("充值账户");
                        z.setXxsm(bz_et.getText().toString().trim());
                        z.setBgjzsj(yqwcrq_et.getText().toString().trim() + " " + yqwcsj_et.getText().toString().trim());
                        z.setPgjg(pgjg_et.getText().toString().trim());
                        z.setDkyh(dkyh_et.getText().toString().trim());
                        ex.AddZB(z);
                        dialog = Dialog.showWaitDialog(CreateKC.this, "加载中...", false, false);
                    } catch (Exception e)

                    {
                        Toast.makeText(this, "请检查信息完整性！", Toast.LENGTH_LONG).show();
                    }
                    break;


            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }


    /***
     * 得到物业类型数据列表
     */
    private void getWylxList() throws JSONException {


        if (array != null) {
            JSONArray Jarr = JSONUtils.getJSONArray((JSONObject) array.get(0), "zblb");

            for (int i = 0; i < Jarr.length(); i++)

            {
                pickviewdata.add(new ProvinceBean(JSONUtils.getLong((JSONObject) Jarr.get(i), "value"), JSONUtils.getString((JSONObject) Jarr.get(i), "name"), "",
                        ""));

            }


        }
    }


    /***
     * 得到要求完成时间
     */
    private void getYQWCSJ() throws JSONException {
        TimePickerView time2 = new TimePickerView(this, TimePickerView.Type.HOURS_MINS);
        time2.setTitle("时间");
        time2.setCyclic(true);
        time2.setOnTimeSelectListener(new TimePickerView.OnTimeSelectListener() {
            @Override
            public void onTimeSelect(Date date) {
                SimpleDateFormat time = new SimpleDateFormat("hh:mm");
                yqwcsj_et.setText(time.format(date).toString());
                yqwcsj_et.setTextColor(Color.BLACK);
            }
        });
        time2.show();
    }

    /***
     * 得到有效时间
     */
    private void getYXSJ() throws JSONException {


        if (array != null) {
            JSONArray Jarr = JSONUtils.getJSONArray((JSONObject) array.get(0), "yxsj");

            for (int i = 0; i < Jarr.length(); i++)

            {
                pickviewdata.add(new ProvinceBean(JSONUtils.getLong((JSONObject) Jarr.get(i), "value"), JSONUtils.getString((JSONObject) Jarr.get(i), "name"), "",
                        ""));

            }


        }
    }

    /***
     * 得到招标范围
     */
    private void getZBFW() {

        pickviewdata.add(new ProvinceBean(0, "对外", "",
                ""));
        pickviewdata.add(new ProvinceBean(1, "对内", "",
                ""));

    }

    /***
     * 得到勘察表
     */
    private void getKcb() throws JSONException {


        if (array != null) {
            JSONArray Jarr = JSONUtils.getJSONArray((JSONObject) array.get(0), "kcbmb");

            for (int i = 0; i < Jarr.length(); i++)

            {
                pickviewdata.add(new ProvinceBean(JSONUtils.getLong((JSONObject) Jarr.get(i), "MBBH"), JSONUtils.getString((JSONObject) Jarr.get(i), "MBMC"), "",
                        ""));

            }


        }
    }


    private void setTimePick() {
        time.setTitle("日期");
        time.setCyclic(true);
        time.setOnTimeSelectListener(new TimePickerView.OnTimeSelectListener() {
            @Override
            public void onTimeSelect(Date date) {
                SimpleDateFormat time = new SimpleDateFormat("yyyy-MM-dd");
                yqwcrq_et.setText(time.format(date).toString());
                yqwcrq_et.setTextColor(Color.BLACK);
            }
        });
    }

    // FIXME: 2017/3/21  pickview
    private void setPickerView(final String keyWord) {
        //三级联动效果
        optionsPickerView.setPicker(pickviewdata, null, null, false);
        optionsPickerView.setCyclic(false, false, false);
        //设置默认选中的三级项目
        //监听确定选择按钮
        optionsPickerView.setSelectOptions(1, 1, 1);

        optionsPickerView.setOnoptionsSelectListener(new OptionsPickerView.OnOptionsSelectListener() {

            @Override
            public void onOptionsSelect(int options1, int option2, int options3) {
                //返回的分别是三个级别的选中位置

                switch (keyWord) {
                    case "choose_zblx":
                        zblx_et.setText(pickviewdata.get(options1).getName());
                        zblx_et.setTextColor(Color.BLACK);
                        zblb = (int) pickviewdata.get(options1).getId();
                        break;
                    case "choose_kcb":
                        kcb_et.setText(pickviewdata.get(options1).getName());
                        kcb_et.setTextColor(Color.BLACK);
                        kcbmb = (int) pickviewdata.get(options1).getId();
                        break;
                    case "choose_zbfw":
                        if (pickviewdata.get(options1).getId() == 1) {
                            zbdx.setVisibility(View.VISIBLE);
                            zbdx_view.setVisibility(View.VISIBLE);
                        } else {
                            zbdx.setVisibility(View.GONE);
                            zbdx_view.setVisibility(View.GONE);
                            zbdx_et.setText("");
                        }

                        nbzb = (int) pickviewdata.get(options1).getId();
                        zbfw_et.setText(pickviewdata.get(options1).getName());
                        zbfw_et.setTextColor(Color.BLACK);
                        break;
                    case "choose_yxsj":
                        yxsj_et.setText(pickviewdata.get(options1).getName());
                        yxsj_et.setTextColor(Color.BLACK);
                        break;
                }

            }
        });

    }


    //打断返回按钮的事件防止误触
    @Override
    public void onBackPressed() {

        Log.MyToast("本界面已屏蔽系统后退，请点击左上返回", CreateKC.this);
        return;
    }


    private JSONArray array;


    private Handler handler = new Handler() {


        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);


            switch (msg.what) {
                case ERROR:
                    if (dialog.isShowing()) {
                        dialog.cancel();
                    }
                    Toast.makeText(CreateKC.this, ex.getMessageInfo(_error), Toast.LENGTH_LONG).show();
                    break;

                case ADDKCSUCCESS:
                    String value = msg.getData().getString("addZb");
                    JSONObject data;
                    try {
                        data = new JSONObject(value);
                        JSONObject tempData = (JSONObject) data.get("data");

                        if(selectedPhotos!=null) {
                            if (selectedPhotos.size() > 0) {
                                for (int c = 0; c < selectedPhotos.size(); c++) {
                                    Map<String, String> map = new HashMap<>();
                                    map.put("userid", ex.userId.toString());
                                    map.put("imgtype", "招标附件");
                                    map.put("fjbs", tempData.get("fjbs").toString());
                                    map.put("zbid", tempData.get("zbid").toString());
                                    map.put("imgname", String.valueOf(c));
                                    Log.e(selectedPhotos.get(c));
                                    ex.send(new File(selectedPhotos.get(c)), map);

                                }
                            }else {
                                Toast.makeText(CreateKC.this, "提交成功", Toast.LENGTH_LONG).show();
                                dialog.cancel();
                                finish();
                            }
                        }else {
                                Toast.makeText(CreateKC.this, "提交成功", Toast.LENGTH_LONG).show();
                                dialog.cancel();
                                finish();
                            }

                        ImageCount = 0;

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    break;
                case IMAGE_UP:
                    ImageCount++;
                    if (ImageCount == selectedPhotos.size()) {
                        Toast.makeText(CreateKC.this, "提交成功", Toast.LENGTH_LONG).show();
                        dialog.cancel();
                        finish();
                    }
                    break;

            }

        }
    };
    private int ImageCount = 0;
    private final int IMAGE_UP = 333;
    private final int ERROR = 404;
    private final int ADDKCSUCCESS = 3335;
    private String _str = "";
    private String _error = "";

    @Override
    public void onMessage(String str, String cmd, int code) {
        Log.e(str);
        if (code != 0) {
            _error = str;
            handler.sendEmptyMessage(ERROR);
        } else {

            switch (cmd) {

                case "upload_img":     //上传图片信息
                    handler.sendEmptyMessage(IMAGE_UP);
                    break;
                case "conn.getSyType":
                    JSONObject object = JSONUtils.StringToJSON(str);
                    array = JSONUtils.getJSONArray(object, "data");
                    break;
                case "business.addZb":
                    Message message = Message.obtain();
                    message.what = ADDKCSUCCESS;
                    Bundle bundle = new Bundle();
                    bundle.putString("addZb", str);
                    message.setData(bundle);
                    handler.sendMessage(message);
                    ImageCount = 0;
                    break;
            }
        }
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (data == null)
            return;

        if (resultCode == 260) {
            pgjg_et.setText(data.getStringExtra("JGMC"));
            pgjg_et.setTextColor(Color.BLACK);
        }
        if (resultCode == 230) {

            szqs_et.setText(data.getStringExtra("dqmc"));
            Dqdm = data.getIntExtra("dqdm", 0);

        }
        if (resultCode == RESULT_OK &&
                (requestCode == PhotoPicker.REQUEST_CODE || requestCode == PhotoPreview.REQUEST_CODE)) {
            p.setResult(data);
            selectedPhotos = p.getPhoto();
        }
        if (resultCode == 200) {
            List<Group> g = (List<Group>) data.getBundleExtra("group").getSerializable("value");
            String str = "";
            zbdx_int = new JSONArray();
            for (int u = 0; u < g.size(); u++) {
                zbdx_int.put(g.get(u).getUserid());
                str += g.get(u).getXm() + "、";
            }
            zbdx_et.setText(str);
            zbdx_et.setTextColor(Color.BLACK);
        }
    }


}
