package com.android.pgb.Activity.Activity_Me;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Message;
import android.provider.MediaStore;
import android.support.v7.widget.PopupMenu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import com.android.pgb.Bean.UserInfo;
import com.android.pgb.BroadCast.ExChange;
import com.android.pgb.R;
import com.android.pgb.Utils.ImageUpload;
import com.android.pgb.Utils.Log;
import com.android.pgb.Utils.SharedPreferences.SharedPreferencesUtils;
import com.android.pgb.View.CBarView;
import com.bumptech.glide.Glide;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Handler;

public class Activity_FastAuth extends Activity implements ExChange.CallBackForData {
    private Button btn_submit;
    private ExChange ex;
    private ImageView tx_img;
    private EditText fg, xm, tg, nc;
    private Uri uri;
    private String path;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity__fast_auth);

        new CBarView(this, new CBarView.OnClickListener() {
            @Override
            public void onLeftClick() {
                super.onLeftClick();
                finish();
            }

            @Override
            public void onRightClick() {
                super.onRightClick();
            }
        }, null);
        ex = new ExChange(this);
        UserInfo userInfo = (UserInfo) SharedPreferencesUtils.readObject(this, "userinfo");
        fg = (EditText) this.findViewById(R.id.fg);
        tg = (EditText) this.findViewById(R.id.tg);
        tx_img = (ImageView) this.findViewById(R.id.tx_img);
        nc = (EditText) this.findViewById(R.id.nc);
        xm = (EditText) this.findViewById(R.id.xm);
        fg.setText(userInfo.getFdcgjszch().equals("null") ? "" : userInfo.getFdcgjszch());
        tg.setText(userInfo.getTdgjszch().equals("null") ? "" : userInfo.getTdgjszch());
        xm.setText(userInfo.getXm().equals("null") ? "" : userInfo.getXm());
        nc.setText(userInfo.getNc());
        tx_img.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showPopupMenu(tx_img);
            }
        });
        if (userInfo.getTx_img().equals("null")) {
            Glide.with(this).load(R.drawable.user).asBitmap().into(tx_img);
        } else {
            Glide.with(this).load(userInfo.getTx_img() + "&cid=" + System.currentTimeMillis() / 1000).asBitmap().into(tx_img);
        }
        btn_submit = (Button) this.findViewById(R.id.btn_submit);
        btn_submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ex.setUserinfo(
                        nc.getText().toString().trim(),
                        xm.getText().toString().trim(),
                        fg.getText().toString().trim(),
                        tg.getText().toString().trim(),
                        "");

            }
        });


    }


    private void showPopupMenu(View view) {
        // View当前PopupMenu显示的相对View的位置
        PopupMenu popupMenu = new PopupMenu(this, view);
        // menu布局
        popupMenu.getMenuInflater().inflate(R.menu.main, popupMenu.getMenu());
        // menu的item点击事件
        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {

                int vid = item.getItemId();
                switch (vid) {
                    case R.id.action_local:
                        Intent intent = new Intent();
                        intent.setType("image/*");
                        intent.setAction(Intent.ACTION_GET_CONTENT);
                        startActivityForResult(intent, 1);
                        break;
                    case R.id.action_crame:
                        Intent openCameraIntent = new Intent(
                                MediaStore.ACTION_IMAGE_CAPTURE);
                        //    openCameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);
                        startActivityForResult(openCameraIntent, 0);
                        break;

                }


                return false;
            }
        });
        // PopupMenu关闭事件
        popupMenu.setOnDismissListener(new PopupMenu.OnDismissListener() {
            @Override
            public void onDismiss(PopupMenu menu) {
                // Toast.makeText(getApplicationContext(), "关闭PopupMenu", Toast.LENGTH_SHORT).show();
            }
        });
        popupMenu.show();
    }

    private android.os.Handler handler = new android.os.Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case IMG_UP:

                    Log.MyToast(ex.getMessageInfo(_str), Activity_FastAuth.this);
                    finish();

                    break;
            }
        }
    };

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        super.onActivityResult(requestCode, resultCode, data);
        if (data == null) {
            return;
        }

        if (requestCode == 1) {// 从本地相册找
            uri = data.getData();
            path = ImageUpload.getImageAbsolutePath(this, uri);
            tx_img.setImageURI(uri);
        }
        if (requestCode == 0) { //拍照图片
            Bitmap bitmap = (Bitmap) data.getExtras().get("data");
            uri = Uri.parse(MediaStore.Images.Media.insertImage(getContentResolver(), bitmap, null, null));
            tx_img.setImageBitmap(bitmap);
            path = ImageUpload.getImageAbsolutePath(this, uri);
        }

        Map<String, String> map = new HashMap<>();
        map.put("userid", ex.userId.toString());
        map.put("imgtype", "头像");
        if (!path.equals(""))
            ex.send(new File(path), map);

    }

    private final int IMG_UP = 333;
    private String _str = "";

    @Override
    public void onMessage(String str, String cmd, int code) {

        Log.e("ddd" + "===" + str);
        if (cmd.equals("user.setUserinfo")) {
            _str = str;
            handler.sendEmptyMessage(IMG_UP);
        }
    }
}
