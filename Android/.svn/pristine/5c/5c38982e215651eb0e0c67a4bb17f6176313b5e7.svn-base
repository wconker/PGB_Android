package com.android.pgb.Activity.Activity_XJ;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import com.android.pgb.Activity.Activity_Me.Activity_Auth;
import com.android.pgb.Bean.UserInfo;
import com.android.pgb.BroadCast.ExChange;
import com.android.pgb.R;
import com.android.pgb.Utils.CheckUserInfo;
import com.android.pgb.Utils.Dialog;
import com.android.pgb.Utils.Image.Photo;
import com.android.pgb.Utils.Log;
import com.android.pgb.Utils.SharedPreferences.SharedPreferencesUtils;
import com.android.pgb.View.CBarView;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BrokenBarrierException;

import me.iwf.photopicker.PhotoPicker;
import me.iwf.photopicker.PhotoPreview;

public class Activity_addBJ extends Activity implements ExChange.CallBackForData {
    private android.app.Dialog waitting;
    private TextView bj_wydz, bj_mj;
    private EditText bz, dj, zj;
    private int _xjid = 0;
    private Button add_btn;
    private ExChange ex;
    private int xjlb;
    private Photo p;
    private ArrayList<String> selectedPhotos = new ArrayList<>();
    private int ImageCount = 0;
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            Dialog dialog;
            switch (msg.what) {
                case ERROR:
                    new Dialog(Activity_addBJ.this, "提示", ex.getMessageInfo(_error));
                    break;
                case ADDBJ:
                    String value = _str;
                    JSONObject data;
                    try {
                        data = new JSONObject(value);
                        JSONObject tempData = (JSONObject) data.get("data");
                        waitting = Dialog.showWaitDialog(Activity_addBJ.this, "加载中...", false, false);
                        if (selectedPhotos.size() > 0) {
                            for (int c = 0; c < selectedPhotos.size(); c++) {
                                Map<String, String> map = new HashMap<>();
                                map.put("userid", ex.userId.toString());
                                map.put("imgtype", "报价附件");
                                map.put("fjbs", tempData.get("fjbs").toString());
                                map.put("bjid", tempData.get("bjid").toString());
                                map.put("imgname", String.valueOf(c));
                                Log.e(selectedPhotos.get(c));
                                ex.send(new File(selectedPhotos.get(c)), map);

                            }
                        } else {
                            waitting.cancel();
                            Log.MyToast("提交成功", Activity_addBJ.this);
                            finish();
                        }

                    } catch (JSONException ex) {


                    }

                    break;
                case IMAGE_UP:

                    //图片上传反馈
                    if (ImageCount == selectedPhotos.size()) {
                        waitting.cancel();
                        Log.MyToast("提交成功", Activity_addBJ.this);
                        finish();
                    }

                    break;
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_bj);
        new CBarView(this, new CBarView.OnClickListener() {
            @Override
            public void onLeftClick() {
                super.onLeftClick();
                finish();
            }

            @Override
            public void onRightClick() {
                super.onRightClick();

            }
        }, null);
        initView();
        ex = new ExChange(this);
        Intent intent = getIntent();


        bj_mj.setText(intent.getStringExtra("mj"));
        bj_wydz.setText(intent.getStringExtra("wydz"));
        _xjid = intent.getIntExtra("xjid", 0);
        xjlb = intent.getIntExtra("xjlb", 0);
        add_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //能获取到数据提前赋值
                UserInfo userInfo = (UserInfo) SharedPreferencesUtils.readObject(Activity_addBJ.this, "userinfo");
                CheckUserInfo.setUserInfo(userInfo);
                if (!CheckUserInfo.checkSmrz()) {
                    new Dialog(Activity_addBJ.this, "提示：", "实名认证后才可报价，是否前往认证？", new Dialog.dialogButton() {
                        @Override
                        public void ok(DialogInterface dialog, int which) {
                            Intent i = new Intent(Activity_addBJ.this, Activity_Auth.class);
                            i.putExtra("type", "sm");
                            startActivity(i);
                        }

                        @Override
                        public void cannot(DialogInterface dialog, int which) {


                        }
                    });

                    return;
                }


                if (!CheckUserInfo.checkFdcgjs()&&!CheckUserInfo.checkTdgjs()) {
                    new Dialog(Activity_addBJ.this, "提示：", "估价师认证后才可发布，是否前往认证？", new Dialog.dialogButton() {
                        @Override
                        public void ok(DialogInterface dialog, int which) {
                            Intent i = new Intent(Activity_addBJ.this, Activity_Auth.class);
                            i.putExtra("type", "fc");
                            startActivity(i);

                        }
                        @Override
                        public void cannot(DialogInterface dialog, int which) {
                        }
                    });
                    return;
                }
                try {
                    //添加一个报价
                    ex.addbj(_xjid,
                            xjlb,
                            Float.parseFloat(bj_mj.getText().toString()),
                            Float.parseFloat(dj.getText().toString()),
                            Float.parseFloat(zj.getText().toString()),
                            1,
                            bz.getText().toString());
                } catch (Exception e) {


                    Log.MyToast("请检查信息是否完整?", Activity_addBJ.this);
                }
            }
        });


    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK &&
                (requestCode == PhotoPicker.REQUEST_CODE || requestCode == PhotoPreview.REQUEST_CODE)) {
            p.setResult(data);
            selectedPhotos = p.getPhoto();

        }
    }

    private void initView() {

        p = (Photo) this.findViewById(R.id.photo);
        bj_mj = (TextView) this.findViewById(R.id.bj_mj);
        bj_wydz = (TextView) this.findViewById(R.id.bj_wydz);
        add_btn = (Button) this.findViewById(R.id.add_btn);
        dj = (EditText) this.findViewById(R.id.dj);
        dj.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                try {
                    zj.setText(String.valueOf((Float.parseFloat(dj.getText().toString()) * Float.parseFloat(bj_mj.getText().toString())) / 10000));

                } catch (Exception e) {

                }

            }
        });
        p.setActivity(Activity_addBJ.this);
        zj = (EditText) this.findViewById(R.id.zj);
        bz = (EditText) this.findViewById(R.id.fdc_bz_et);
    }

    private String _str = "", _error = "";
    private final int ADDBJ = 2333;
    private final int ERROR = 404;
    private final int IMAGE_UP = 333;

    @Override
    public void onMessage(String str, String cmd, int code) {
        Log.e(str);
        if (code == 0) {
            switch (cmd) {
                case "upload_img":     //上传图片信息
                    ImageCount++;
                    handler.sendEmptyMessage(IMAGE_UP);
                    break;
                case "business.addbj":
                    if (code == 0) {
                        _str = str;
                        ImageCount = 0;
                        handler.sendEmptyMessage(ADDBJ);
                    } else {
                        handler.sendEmptyMessage(ERROR);
                    }
                    break;
            }
        } else {
            _error = str;
            handler.sendEmptyMessage(ERROR);
        }
    }
}
